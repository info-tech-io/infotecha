name: Build Module

on:
  repository_dispatch:
    types: [build-module]
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Module name to build'
        required: true
        type: string
        default: 'linux_base'
      content_repo:
        description: 'Content repository name'
        required: true
        type: string
        default: 'mod_linux_base'

env:
  MODULE_NAME: ${{ github.event.client_payload.module_name || github.event.inputs.module_name || 'linux_base' }}
  CONTENT_REPO: ${{ github.event.client_payload.content_repo || github.event.inputs.content_repo || 'mod_linux_base' }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Debug workflow trigger and environment
      run: |
        echo "üîç Build Module Workflow Debug Information"
        echo "Trigger event: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo ""
        echo "Environment variables:"
        echo "MODULE_NAME: ${{ env.MODULE_NAME }}"
        echo "CONTENT_REPO: ${{ env.CONTENT_REPO }}"
        echo ""
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "Repository dispatch payload:"
          echo "module_name: ${{ github.event.client_payload.module_name }}"
          echo "content_repo: ${{ github.event.client_payload.content_repo }}"
          echo "trigger: ${{ github.event.client_payload.trigger }}"
        elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual workflow dispatch inputs:"
          echo "module_name: ${{ github.event.inputs.module_name }}"
          echo "content_repo: ${{ github.event.inputs.content_repo }}"
        fi
        echo ""
        echo "‚úÖ Environment validation complete"
        
    - name: Validate environment variables
      run: |
        if [ -z "${{ env.MODULE_NAME }}" ] || [ "${{ env.MODULE_NAME }}" = "null" ]; then
          echo "‚ùå MODULE_NAME is empty or null"
          exit 1
        fi
        
        if [ -z "${{ env.CONTENT_REPO }}" ] || [ "${{ env.CONTENT_REPO }}" = "null" ]; then
          echo "‚ùå CONTENT_REPO is empty or null"
          exit 1
        fi
        
        echo "‚úÖ Environment variables validated successfully"
        echo "Will build module: ${{ env.MODULE_NAME }}"
        echo "Using content from: ${{ env.CONTENT_REPO }}"
        
    - name: Checkout infotecha repository
      uses: actions/checkout@v4
      
    - name: Checkout hugo-base template
      uses: actions/checkout@v4
      with:
        repository: info-tech-io/hugo-base
        path: hugo-base
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Checkout module content
      uses: actions/checkout@v4
      with:
        repository: info-tech-io/${{ env.CONTENT_REPO }}
        path: module-content
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.148.2'
        extended: true
        
    - name: Validate checkout operations
      run: |
        echo "üîç Validating checkout operations..."
        
        if [ ! -d hugo-base ] || [ -z "$(ls -A hugo-base)" ]; then
          echo "‚ùå hugo-base checkout failed or empty"
          exit 1
        fi
        
        if [ ! -d module-content ] || [ -z "$(ls -A module-content)" ]; then
          echo "‚ùå module-content checkout failed or empty"
          exit 1
        fi
        
        if [ ! -f modules.json ]; then
          echo "‚ùå modules.json not found in infotecha repository"
          exit 1
        fi
        
        echo "‚úÖ All repositories validated successfully"
        
    - name: Build module site
      run: |
        echo "üèóÔ∏è Building module: ${{ env.MODULE_NAME }}"
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
        mkdir -p build-workspace
        cd build-workspace
        
        # –ö–æ–ø–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω hugo-base (—Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã)
        echo "üìã Copying hugo-base template..."
        cp -r ../hugo-base/* . 2>/dev/null || true
        
        # –ö–æ–ø–∏—Ä—É–µ–º .gitmodules –¥–ª—è submodules
        if [ -f ../hugo-base/.gitmodules ]; then
          cp ../hugo-base/.gitmodules .
          echo "üìã .gitmodules copied"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
        if [ ! -f hugo.toml ]; then
          echo "‚ùå hugo.toml not found after copy!"
          ls -la
          exit 1
        fi
        
        # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è (–µ—Å–ª–∏ –ø–∞–ø–∫–∞ content –µ—Å—Ç—å –≤ –º–æ–¥—É–ª–µ)
        if [ -d "../module-content/content" ]; then
            echo "üìÇ Using content from module repository"
            rm -rf content/
            cp -r ../module-content/content/ ./
        else
            echo "‚ö†Ô∏è No content/ folder in module repository, using default"
        fi
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥—É–ª—è –∏–∑ modules.json
        echo "üîç Reading module configuration..."
        MODULE_SUBDOMAIN=$(jq -r --arg module "${{ env.MODULE_NAME }}" '.modules[$module].subdomain' ../modules.json)
        MODULE_TITLE=$(jq -r --arg module "${{ env.MODULE_NAME }}" '.modules[$module].name' ../modules.json)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã
        if [ "$MODULE_SUBDOMAIN" = "null" ] || [ -z "$MODULE_SUBDOMAIN" ]; then
          echo "‚ùå Could not get subdomain for module: ${{ env.MODULE_NAME }}"
          echo "Available modules:"
          jq -r '.modules | keys[]' ../modules.json
          exit 1
        fi
        
        if [ "$MODULE_TITLE" = "null" ] || [ -z "$MODULE_TITLE" ]; then
          echo "‚ùå Could not get title for module: ${{ env.MODULE_NAME }}"
          exit 1
        fi
        
        echo "üéØ Module parameters:"
        echo "  Name: ${{ env.MODULE_NAME }}"
        echo "  Subdomain: ${MODULE_SUBDOMAIN}"
        echo "  Title: ${MODULE_TITLE}"
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º hugo.toml
        echo "‚öôÔ∏è Updating hugo.toml configuration..."
        sed -i "s|baseURL = '.*'|baseURL = 'https://${MODULE_SUBDOMAIN}.infotecha.ru/'|" hugo.toml
        sed -i "s|title = '.*'|title = '${MODULE_TITLE}'|" hugo.toml
        
        echo "‚úÖ Configuration updated:"
        echo "  Base URL: https://${MODULE_SUBDOMAIN}.infotecha.ru/"
        echo "  Title: ${MODULE_TITLE}"
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º git –∏ submodules
        echo "üîß Setting up git repository and submodules..."
        git init
        git config user.name "InfoTech.io Bot"
        git config user.email "bot@infotecha.ru"
        
        # –î–æ–±–∞–≤–ª—è–µ–º remote –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ submodules
        git remote add origin https://github.com/info-tech-io/hugo-base.git
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º submodules —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ .gitmodules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if [ -f .gitmodules ]; then
          echo "üì¶ Initializing git submodules..."
          git submodule update --init --recursive || {
            echo "‚ö†Ô∏è Submodule initialization failed, checking themes manually..."
            if [ ! -d themes/compose ] || [ -z "$(ls -A themes/compose 2>/dev/null)" ]; then
              echo "‚ùå Theme not available, cannot build site"
              exit 1
            fi
            echo "‚úÖ Theme directory exists, continuing..."
          }
        else
          echo "‚ÑπÔ∏è No .gitmodules found, skipping submodule initialization"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–º–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if [ ! -d themes/compose ]; then
          echo "‚ùå Theme 'compose' not found in themes/ directory"
          ls -la themes/
          exit 1
        fi
        
        echo "üèóÔ∏è Building Hugo site..."
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–∞–π—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
        if ! hugo --minify --gc --verbose; then
          echo "‚ùå Hugo build failed!"
          echo "üìã Hugo configuration:"
          cat hugo.toml
          echo "üìÇ Directory structure:"
          find . -type f -name '*.toml' -o -name '*.yaml' -o -name '*.yml' | head -10
          echo "üìÇ Themes:"
          ls -la themes/
          echo "üìÇ Content:"
          ls -la content/
          exit 1
        fi
        
        echo "‚úÖ Site built successfully"
        echo "üìÇ Generated files:"
        ls -la public/ | head -10
        
    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          set -e
          
          MODULE_NAME="${{ env.MODULE_NAME }}"
          MODULE_SUBDOMAIN=$(echo "$MODULE_NAME" | tr '_' '-')
          
          echo "üöÄ Deploying module: $MODULE_NAME to subdomain: $MODULE_SUBDOMAIN"
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥—É–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          sudo mkdir -p "/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
          sudo chown -R www-data:www-data "/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"
          
          echo "‚úÖ Module deployment directory prepared"
          
    - name: Upload built site
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "build-workspace/public/*"
        target: "/tmp/infotecha-deploy-${{ env.MODULE_NAME }}/"
        strip_components: 2
        
    - name: Complete deployment
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          set -e
          
          MODULE_NAME="${{ env.MODULE_NAME }}"
          MODULE_SUBDOMAIN=$(echo "$MODULE_NAME" | tr '_' '-')
          DEPLOY_DIR="/tmp/infotecha-deploy-${MODULE_NAME}"
          TARGET_DIR="/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"
          
          echo "üì¶ Deploying files to: $TARGET_DIR"
          
          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
          sudo cp -r "$DEPLOY_DIR"/* "$TARGET_DIR/"
          
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
          sudo chown -R www-data:www-data "$TARGET_DIR"
          sudo chmod -R 755 "$TARGET_DIR"
          
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf "$DEPLOY_DIR"
          
          # –û–±–Ω–æ–≤–ª—è–µ–º/—Å–æ–∑–¥–∞–µ–º Apache –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          if ! sudo test -f /etc/apache2/sites-available/infotecha.conf; then
            echo "‚öôÔ∏è Creating Apache configuration..."
            sudo tee /etc/apache2/sites-available/infotecha.conf > /dev/null << 'EOF'
<VirtualHost *:80>
    ServerName infotecha.ru
    ServerAlias *.infotecha.ru
    DocumentRoot /var/www/infotecha.ru
    
    <Directory /var/www/infotecha.ru>
        Options -Indexes +FollowSymLinks
        AllowOverride All
        Require all granted
        DirectoryIndex index.html
    </Directory>
    
    RewriteEngine On
    RewriteCond %{HTTP_HOST} ^([a-z0-9\-]+)\.infotecha\.ru$ [NC]
    RewriteCond %{HTTP_HOST} !^(www|mail|ftp|admin)\.infotecha\.ru$ [NC]
    RewriteCond %{DOCUMENT_ROOT}/%1 -d
    RewriteRule ^(.*)$ /%1/$1 [L]
    
    ErrorLog /var/www/infotecha.ru/logs/error.log
    CustomLog /var/www/infotecha.ru/logs/access.log combined
</VirtualHost>
EOF
            sudo a2enmod rewrite headers
            sudo a2ensite infotecha.conf
            sudo a2dissite 000-default || true
          fi
          
          # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Apache –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π  
          sudo systemctl reload apache2
          
          echo "‚úÖ Module $MODULE_NAME deployed successfully"
          echo "üåê Available at: https://${MODULE_SUBDOMAIN}.infotecha.ru"