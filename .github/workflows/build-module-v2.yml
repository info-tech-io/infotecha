name: Build Module v2 (Hugo Template Factory)

on:
  repository_dispatch:
    types: [build-module-v2]
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Module name to build (e.g., linux_base)'
        required: true
        type: string
        default: 'linux_base'
      content_repo:
        description: 'Content repository name (e.g., mod_linux_base)'
        required: true
        type: string
        default: 'mod_linux_base'
      force_hugo_base:
        description: 'Emergency fallback to legacy hugo-base'
        required: false
        type: boolean
        default: false

env:
  MODULE_NAME: ${{ github.event.client_payload.module_name || github.event.inputs.module_name || 'linux_base' }}
  CONTENT_REPO: ${{ github.event.client_payload.content_repo || github.event.inputs.content_repo || 'mod_linux_base' }}
  FORCE_HUGO_BASE: ${{ github.event.client_payload.force_hugo_base || github.event.inputs.force_hugo_base || 'false' }}

jobs:
  determine-build-system:
    runs-on: ubuntu-latest
    outputs:
      build_system: ${{ steps.determine.outputs.build_system }}
      hugo_template: ${{ steps.determine.outputs.hugo_template }}
      hugo_theme: ${{ steps.determine.outputs.hugo_theme }}
      hugo_components: ${{ steps.determine.outputs.hugo_components }}
      module_subdomain: ${{ steps.determine.outputs.module_subdomain }}
      module_title: ${{ steps.determine.outputs.module_title }}

    steps:
    - name: Workflow identification
      run: |
        echo "üöÄ Build Module v2 - Hugo Template Factory Framework"
        echo "======================================================"
        echo "Module: ${{ env.MODULE_NAME }}"
        echo "Content repo: ${{ env.CONTENT_REPO }}"
        echo "Force legacy: ${{ env.FORCE_HUGO_BASE }}"
        echo "Trigger: ${{ github.event_name }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo ""

    - name: Checkout infotecha for utilities
      uses: actions/checkout@v4

    - name: Setup Node.js for module scanning
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies for Task 007 utilities
      run: |
        echo "üì¶ Installing dependencies for module scanning..."
        npm install
        echo "‚úÖ Dependencies installed"

    - name: Determine build system and configuration
      id: determine
      run: |
        echo "üîç Determining build system for module: $MODULE_NAME"

        if [ "$FORCE_HUGO_BASE" = "true" ]; then
          echo "‚ö†Ô∏è EMERGENCY: Forced hugo-base mode activated"
          echo "build_system=legacy" >> $GITHUB_OUTPUT
          echo "hugo_template=legacy" >> $GITHUB_OUTPUT
          echo "hugo_theme=compose" >> $GITHUB_OUTPUT
          echo "hugo_components=quiz-engine" >> $GITHUB_OUTPUT
        else
          echo "üì° Reading configuration from module.json using Task 007 utilities..."

          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã Task 007
          set +e  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          SCAN_OUTPUT=$(node scripts/scan-modules.js --module "mod_$MODULE_NAME" --output json 2>/dev/null)
          SCAN_EXIT_CODE=$?
          # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ JSON —á–∞—Å—Ç—å (–≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π {)
          MODULE_CONFIG=$(echo "$SCAN_OUTPUT" | sed -n '/{/,$p')
          set -e

          if [ $SCAN_EXIT_CODE -eq 0 ] && [ "$MODULE_CONFIG" != "{}" ] && [ -n "$MODULE_CONFIG" ]; then
            echo "‚úÖ Found module.json configuration"

            # –ò–∑–≤–ª–µ–∫–∞–µ–º Hugo –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            HUGO_TEMPLATE=$(echo "$MODULE_CONFIG" | jq -r '.hugo_config.template // "default"')
            HUGO_THEME=$(echo "$MODULE_CONFIG" | jq -r '.hugo_config.theme // "compose"')
            HUGO_COMPONENTS=$(echo "$MODULE_CONFIG" | jq -r '.hugo_config.components[]' 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "quiz-engine")

            if [ "$HUGO_TEMPLATE" != "null" ] && [ -n "$HUGO_TEMPLATE" ]; then
              echo "üéØ Using Hugo Template Factory Framework"
              echo "build_system=modern" >> $GITHUB_OUTPUT
              echo "hugo_template=$HUGO_TEMPLATE" >> $GITHUB_OUTPUT
              echo "hugo_theme=$HUGO_THEME" >> $GITHUB_OUTPUT
              echo "hugo_components=$HUGO_COMPONENTS" >> $GITHUB_OUTPUT

              echo "üìã Hugo Configuration:"
              echo "  Template: $HUGO_TEMPLATE"
              echo "  Theme: $HUGO_THEME"
              echo "  Components: $HUGO_COMPONENTS"
            else
              echo "‚ö†Ô∏è Invalid hugo_config in module.json, falling back to hugo-base"
              echo "build_system=legacy" >> $GITHUB_OUTPUT
              echo "hugo_template=legacy" >> $GITHUB_OUTPUT
              echo "hugo_theme=compose" >> $GITHUB_OUTPUT
              echo "hugo_components=quiz-engine" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è No valid module.json found or scan failed, falling back to hugo-base"
            echo "Scan exit code: $SCAN_EXIT_CODE"
            echo "Module config: $MODULE_CONFIG"
            echo "build_system=legacy" >> $GITHUB_OUTPUT
            echo "hugo_template=legacy" >> $GITHUB_OUTPUT
            echo "hugo_theme=compose" >> $GITHUB_OUTPUT
            echo "hugo_components=quiz-engine" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Get module metadata
      id: metadata
      run: |
        echo "üìã Reading module metadata..."

        # –ü–æ–ª—É—á–∞–µ–º subdomain –∏ title –∏–∑ modules.json (legacy) –∏–ª–∏ module.json (modern)
        MODULE_SUBDOMAIN=$(echo "$MODULE_NAME" | tr '_' '-')

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å title –∏–∑ module.json
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º mod_ prefix –¥–ª—è API –∏ –ø–æ–¥–∞–≤–ª—è–µ–º stderr
        MODULE_CONFIG=$(node scripts/scan-modules.js --module "mod_$MODULE_NAME" --output json 2>/dev/null || echo '{}')
        MODULE_TITLE=$(echo "$MODULE_CONFIG" | jq -r '.title // ""' 2>/dev/null || echo "")

        # Fallback –Ω–∞ legacy modules.json
        if [ -z "$MODULE_TITLE" ] || [ "$MODULE_TITLE" = "null" ]; then
          MODULE_TITLE=$(jq -r --arg module "$MODULE_NAME" '.modules[$module].name // "Unknown Module"' modules.json)
        fi

        echo "module_subdomain=$MODULE_SUBDOMAIN" >> $GITHUB_OUTPUT
        echo "module_title=$MODULE_TITLE" >> $GITHUB_OUTPUT

        echo "üéØ Module Metadata:"
        echo "  Name: $MODULE_NAME"
        echo "  Subdomain: $MODULE_SUBDOMAIN"
        echo "  Title: $MODULE_TITLE"

  build-with-hugo-templates:
    needs: determine-build-system
    if: needs.determine-build-system.outputs.build_system == 'modern'
    runs-on: ubuntu-latest

    steps:
    - name: Hugo Template Factory build notification
      run: |
        echo "üéØ Building with Hugo Template Factory Framework"
        echo "================================================"
        echo "Module: ${{ env.MODULE_NAME }}"
        echo "Template: ${{ needs.determine-build-system.outputs.hugo_template }}"
        echo "Theme: ${{ needs.determine-build-system.outputs.hugo_theme }}"
        echo "Components: ${{ needs.determine-build-system.outputs.hugo_components }}"
        echo "Output subdomain: ${{ needs.determine-build-system.outputs.module_subdomain }}"
        echo "Module title: ${{ needs.determine-build-system.outputs.module_title }}"

    - name: Checkout hugo-templates repository
      uses: actions/checkout@v4
      with:
        repository: info-tech-io/hugo-templates
        ref: 5f85b57
        path: hugo-templates
        token: ${{ secrets.PAT_TOKEN }}
        submodules: recursive

    - name: Checkout module content
      uses: actions/checkout@v4
      with:
        repository: info-tech-io/${{ env.CONTENT_REPO }}
        path: module-content
        token: ${{ secrets.PAT_TOKEN }}

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.148.2'
        extended: true

    - name: Setup Node.js for hugo-templates
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install hugo-templates dependencies
      run: |
        cd hugo-templates
        echo "üì¶ Installing Hugo Template Factory dependencies..."
        npm install
        echo "‚úÖ Dependencies installed successfully"

    - name: Validate repositories checkout
      run: |
        echo "üîç Validating repository checkouts..."

        if [ ! -d hugo-templates ] || [ -z "$(ls -A hugo-templates)" ]; then
          echo "‚ùå hugo-templates checkout failed or empty"
          exit 1
        fi

        if [ ! -d module-content ] || [ -z "$(ls -A module-content)" ]; then
          echo "‚ùå module-content checkout failed or empty"
          exit 1
        fi

        echo "‚úÖ All repositories checked out successfully"
        echo "üìÇ Hugo-templates structure:"
        ls -la hugo-templates/ | head -10
        echo "üìÇ Module content structure:"
        ls -la module-content/ | head -10

    - name: Build with Hugo Template Factory
      run: |
        cd hugo-templates

        echo "üèóÔ∏è Building with Hugo Template Factory Framework"
        echo "Configuration:"
        echo "  Template: ${{ needs.determine-build-system.outputs.hugo_template }}"
        echo "  Theme: ${{ needs.determine-build-system.outputs.hugo_theme }}"
        echo "  Components: ${{ needs.determine-build-system.outputs.hugo_components }}"
        echo "  Content source: ../module-content"
        echo "  Output: public/"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å hugo-templates CLI
        if [ ! -f "./scripts/build.sh" ]; then
          echo "‚ùå Hugo Template Factory build script not found"
          ls -la scripts/
          exit 1
        fi

        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        chmod +x ./scripts/build.sh

        # –ó–∞–ø—É—Å–∫–∞–µ–º Hugo Template Factory build
        ./scripts/build.sh \
          --template "${{ needs.determine-build-system.outputs.hugo_template }}" \
          --theme "${{ needs.determine-build-system.outputs.hugo_theme }}" \
          --components "${{ needs.determine-build-system.outputs.hugo_components }}" \
          --content "../module-content" \
          --output "public" \
          --environment "production" \
          --base-url "https://${{ needs.determine-build-system.outputs.module_subdomain }}.infotecha.ru/" \
          --minify \
          --verbose

    - name: Validate build output
      run: |
        cd hugo-templates

        echo "üîç Validating Hugo Template Factory build output..."

        if [ ! -d "public" ] || [ -z "$(ls -A public)" ]; then
          echo "‚ùå Build failed - no output generated"
          exit 1
        fi

        if [ ! -f "public/index.html" ]; then
          echo "‚ùå Build failed - no index.html generated"
          exit 1
        fi

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä output
        OUTPUT_SIZE=$(du -sh public/ | cut -f1)
        FILE_COUNT=$(find public -type f | wc -l)

        echo "‚úÖ Build validation successful"
        echo "üìä Build statistics:"
        echo "  Output size: $OUTPUT_SIZE"
        echo "  Files generated: $FILE_COUNT"
        echo "üìÇ Generated files sample:"
        find public -type f -name "*.html" | head -10

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          MODULE_SUBDOMAIN="${{ needs.determine-build-system.outputs.module_subdomain }}"
          echo "üöÄ Deploying module: ${{ env.MODULE_NAME }} to subdomain: ${MODULE_SUBDOMAIN}"
          echo "üèóÔ∏è Built with: Hugo Template Factory Framework"
          echo "üìã Template: ${{ needs.determine-build-system.outputs.hugo_template }}"

          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –º–æ–¥—É–ª—è
          sudo mkdir -p "/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"
          sudo chown -R www-data:www-data "/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"

          echo "‚úÖ Deployment directory prepared"

    - name: Upload built site
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        source: "hugo-templates/public/*"
        target: "/tmp/infotecha-deploy-${{ env.MODULE_NAME }}/"
        strip_components: 2

    - name: Complete deployment and mark build system
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PROD_HOST }}
        username: ${{ secrets.PROD_USERNAME }}
        key: ${{ secrets.PROD_SSH_KEY }}
        script: |
          MODULE_SUBDOMAIN="${{ needs.determine-build-system.outputs.module_subdomain }}"
          DEPLOY_DIR="/tmp/infotecha-deploy-${{ env.MODULE_NAME }}"
          TARGET_DIR="/var/www/infotecha.ru/${MODULE_SUBDOMAIN}"

          echo "üì¶ Completing deployment to: $TARGET_DIR"

          # Backup current version (if exists)
          if [ -d "$TARGET_DIR" ] && [ "$(ls -A $TARGET_DIR)" ]; then
            sudo cp -r "$TARGET_DIR" "${TARGET_DIR}.backup.$(date +%Y%m%d_%H%M%S)"
            echo "üíæ Current version backed up"
          fi

          # Deploy new version
          sudo cp -r "$DEPLOY_DIR"/* "$TARGET_DIR/"
          sudo chown -R www-data:www-data "$TARGET_DIR"
          sudo chmod -R 755 "$TARGET_DIR"

          # Create build system marker
          BUILD_INFO="hugo-templates:${{ needs.determine-build-system.outputs.hugo_template }}:$(date -Iseconds)"
          echo "$BUILD_INFO" | sudo tee "$TARGET_DIR/.build-system" > /dev/null

          # Create deployment metadata
          cat << EOF | sudo tee "$TARGET_DIR/.deployment-info" > /dev/null
          {
            "build_system": "hugo-templates",
            "template": "${{ needs.determine-build-system.outputs.hugo_template }}",
            "theme": "${{ needs.determine-build-system.outputs.hugo_theme }}",
            "components": "${{ needs.determine-build-system.outputs.hugo_components }}",
            "deployed_at": "$(date -Iseconds)",
            "module_name": "${{ env.MODULE_NAME }}",
            "content_repo": "${{ env.CONTENT_REPO }}",
            "workflow": "build-module-v2"
          }
          EOF

          # Cleanup temporary files
          rm -rf "$DEPLOY_DIR"

          # Reload Apache
          sudo systemctl reload apache2

          echo "‚úÖ Module ${{ env.MODULE_NAME }} deployed successfully with Hugo Template Factory"
          echo "üåê Available at: https://${MODULE_SUBDOMAIN}.infotecha.ru"
          echo "üèóÔ∏è Template: ${{ needs.determine-build-system.outputs.hugo_template }}"
          echo "üé® Theme: ${{ needs.determine-build-system.outputs.hugo_theme }}"
          echo "üß© Components: ${{ needs.determine-build-system.outputs.hugo_components }}"

  build-with-hugo-base:
    needs: determine-build-system
    if: needs.determine-build-system.outputs.build_system == 'legacy'
    runs-on: ubuntu-latest

    steps:
    - name: Legacy build notification
      run: |
        echo "‚ö†Ô∏è Building with LEGACY hugo-base system"
        echo "========================================"
        echo "Module: ${{ env.MODULE_NAME }}"
        echo "Reason: ${{ env.FORCE_HUGO_BASE == 'true' && 'Emergency fallback activated' || 'No valid module.json found' }}"
        echo ""
        echo "üîÑ This workflow will call the legacy build-module.yml"

    - name: Trigger legacy workflow
      run: |
        echo "üîÑ Triggering legacy build-module.yml workflow..."

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GitHub CLI –¥–ª—è –∑–∞–ø—É—Å–∫–∞ legacy workflow
        gh workflow run build-module.yml \
          -R info-tech-io/infotecha \
          -f module_name="${{ env.MODULE_NAME }}" \
          -f content_repo="${{ env.CONTENT_REPO }}"

        echo "‚úÖ Legacy workflow triggered"
        echo "üîç Monitor at: https://github.com/info-tech-io/infotecha/actions"
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}

  build-summary:
    needs: [determine-build-system, build-with-hugo-templates, build-with-hugo-base]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Build summary report
      run: |
        echo "üìä Build Module v2 - Execution Summary"
        echo "======================================"
        echo "Module: ${{ env.MODULE_NAME }}"
        echo "Content Repository: ${{ env.CONTENT_REPO }}"
        echo "Build System: ${{ needs.determine-build-system.outputs.build_system }}"
        echo "Force Legacy: ${{ env.FORCE_HUGO_BASE }}"
        echo ""

        if [ "${{ needs.determine-build-system.outputs.build_system }}" = "modern" ]; then
          echo "üéØ Hugo Template Factory Framework"
          echo "  Template: ${{ needs.determine-build-system.outputs.hugo_template }}"
          echo "  Theme: ${{ needs.determine-build-system.outputs.hugo_theme }}"
          echo "  Components: ${{ needs.determine-build-system.outputs.hugo_components }}"
          echo "  Hugo Templates Job: ${{ needs.build-with-hugo-templates.result }}"
        else
          echo "‚ö†Ô∏è Legacy Hugo-base System"
          echo "  Legacy Job: ${{ needs.build-with-hugo-base.result }}"
        fi

        echo ""
        echo "üåê Module URL: https://${{ needs.determine-build-system.outputs.module_subdomain }}.infotecha.ru"
        echo "üìÖ Completed: $(date -Iseconds)"